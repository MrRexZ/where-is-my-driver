// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gojek-1st/pkg/entity"
import mock "github.com/stretchr/testify/mock"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// FindDrivers provides a mock function with given fields: latitude, longitude, radius, limit
func (_m *Usecase) FindDrivers(latitude float64, longitude float64, radius float64, limit int8) ([]*entity.Driver, error) {
	ret := _m.Called(latitude, longitude, radius, limit)

	var r0 []*entity.Driver
	if rf, ok := ret.Get(0).(func(float64, float64, float64, int8) []*entity.Driver); ok {
		r0 = rf(latitude, longitude, radius, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Driver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64, float64, int8) error); ok {
		r1 = rf(latitude, longitude, radius, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidId provides a mock function with given fields: id
func (_m *Usecase) IsValidId(id int32) {
	_m.Called(id)
}

// IsValidLatLng provides a mock function with given fields: latitude, longitude
func (_m *Usecase) IsValidLatLng(latitude float64, longitude float64) error {
	ret := _m.Called(latitude, longitude)

	var r0 error
	if rf, ok := ret.Get(0).(func(float64, float64) error); ok {
		r0 = rf(latitude, longitude)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLocation provides a mock function with given fields: id, lat, long, accuracy
func (_m *Usecase) UpdateLocation(id int32, lat float64, long float64, accuracy float64) (int32, error) {
	ret := _m.Called(id, lat, long, accuracy)

	var r0 int32
	if rf, ok := ret.Get(0).(func(int32, float64, float64, float64) int32); ok {
		r0 = rf(id, lat, long, accuracy)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, float64, float64, float64) error); ok {
		r1 = rf(id, lat, long, accuracy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
