// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gojek-1st/pkg/entity"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Repository) Get(id string) (*entity.Driver, error) {
	ret := _m.Called(id)

	var r0 *entity.Driver
	if rf, ok := ret.Get(0).(func(string) *entity.Driver); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Driver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]*entity.Driver, error) {
	ret := _m.Called()

	var r0 []*entity.Driver
	if rf, ok := ret.Get(0).(func() []*entity.Driver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Driver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: d
func (_m *Repository) Store(d *entity.Driver) (int32, error) {
	ret := _m.Called(d)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*entity.Driver) int32); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Driver) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreMany provides a mock function with given fields: ds
func (_m *Repository) StoreMany(ds []*entity.Driver) error {
	ret := _m.Called(ds)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*entity.Driver) error); ok {
		r0 = rf(ds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
